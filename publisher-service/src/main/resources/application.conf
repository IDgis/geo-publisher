publisher.service {

	akka {
		io.tcp.windows-connection-abort-workaround-enabled = false
	
		actor {
			provider = "akka.remote.RemoteActorRefProvider"
		}

		remote {
			enabled-transports = ["akka.remote.netty.tcp"]
			netty.tcp {
				maximum-frame-size = 256 KiB
				hostname = ${AKKA_HOSTNAME}
			}
		}
		
		loggers = ["akka.event.slf4j.Slf4jLogger"]		
		loglevel = "INFO"
		loglevel = ${?AKKA_LOGLEVEL}
	}
	
	raster {
		folder = ${RASTER_DIR}
	}
	
	database {
		url = "jdbc:postgresql://"${PG_HOST}":"${PG_PORT}"/"${PG_DBNAME}
		templates = "nl.idgis.publisher.database.ExtendedPostgresTemplates"
		user = ${PG_USER}
		password = ${PG_PASSWORD}
	}
	
	geoserver {
		url = "http://localhost:8080/geoserver/"
		user = ${GEOSERVER_USER}
		password = ${GEOSERVER_PASSWORD}
	}
	
	harvester {
		name = "my-harvester-name"
		
		port = 4242
		
		ssl {
			private {
				file = ${SSL_PRIVATE_KEYSTORE}
				password = ${SSL_PRIVATE_KEYSTORE_PASSWORD}
			}
			
			trusted {
				file = ${SSL_TRUSTED_KEYSTORE}
				password = ${SSL_TRUSTED_KEYSTORE_PASSWORD}
			}
		}
		
		confidentialPath = ${CONFIDENTIAL_PATH}
		dataPublicValue = ${DATA_PUBLIC_VALUE}
		metadataPublicValue = ${METADATA_PUBLIC_VALUE}
		wmsOnlyValue = ${WMSONLY_VALUE}
		archivedValue = ${ARCHIVED_VALUE}
		
		includeConfidential = ${?INCLUDE_CONFIDENTIAL}
	}
	
	metadataUrlPrefix = ${METADATA_URL_PREFIX}
	
	monitor.showTrees = false
	monitor.showTrees = ${?SHOW_TREES}
	
	zooKeeper {
		hosts = ${ZOOKEEPER_HOSTS}
		namespace = null
		stagingEnvironmentId = "geoserver-staging"
		serviceIdPrefix = "geoserver-"
	}
}