# ------------------------------------------------------------------------------ 
# Standard Play configuration:
# ------------------------------------------------------------------------------ 

# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
application.secret="9x`_ocB`=p:vPZciT;rDZNcwbb?BZ4ahX?SbT1fmrmdk:kS9GuV]UStrH2W@im6O"

# The application languages
# ~~~~~
application.langs="nl"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""
#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
# ebean.default="models.*"

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# ------------------------------------------------------------------------------ 
# Akka configuration:
# ------------------------------------------------------------------------------ 
    
akka {
	
	actor {
		provider = "akka.remote.RemoteActorRefProvider"
	}

	remote {
		enabled-transports = ["akka.remote.netty.tcp"]
		netty.tcp {
			hostname = ${AKKA_HOSTNAME}
		}
	}
}

# ------------------------------------------------------------------------------ 
# Geo publisher configuration:
# ------------------------------------------------------------------------------

publisher {
	database.actorRef = "akka.tcp://service@"${SERVICE_HOST}":2552/user/app/admin"
	
	metadata {
		dataset = ${DATASET_METADATA_URL_PREFIX}
		service = ${SERVICE_METADATA_URL_PREFIX}
	}
	
	admin {
		username = "admin@idgis.nl"
		password = ${ADMIN_PASSWORD}
		
		dashboard {
			errorCount = 5
			notificationCount = 5
		}
	}
	
	preview {
		geoserverDomain = "localhost:8080" 
		geoserverDomain = ${?GEOSERVER_DOMAIN}
		geoserverPath = "/geoserver"
		serviceRequest = "service=WMS&version=1.1.0&request=GetMap"
		styles = ""
		bbox = "175000,450000,275000,550000"
		width = 512
		height = 512
		srs = "EPSG:28992"
		format = "application/openlayers"
	}
}

# ------------------------------------------------------------------------------ 
# Zookeeper configuration:
# ------------------------------------------------------------------------------
application.domain = "localhost"

# ZooKeeper host. When set, the application connects to and registers itself with the hosts in this parameter (comma separated):
# zooKeeper.hosts = "localhost:2181"

# ZooKeeper timeout. The timeout on the ZooKeper connection before the next server is tried.
zooKeeper.timeoutInMillis = 10000