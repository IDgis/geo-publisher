# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Dashboard
GET		/												controllers.Dashboard.index()

# General management

POST 	/constants/-/update								controllers.Constants.submitUpdate()
GET		/constants/-/edit								controllers.Constants.edit()

# Categories
GET		/categories										controllers.Categories.edit()
POST	/categories										controllers.Categories.submitUpdate()

# Datasets
GET		/datasets										controllers.Datasets.list(page: Long ?= 1, q: String ?= null)
GET		/datasets/-/create								controllers.Datasets.createForm()
POST	/datasets/-/create								controllers.Datasets.submitCreate()
GET		/datasets/status/:status						controllers.Datasets.listByStatus(status: controllers.Datasets.DatasetStatus, page: Long ?= 1, q: String ?= null)
GET		/datasets/category/:categoryId					controllers.Datasets.listByCategory(categoryId: String, page: Long ?= 1, q: String ?= null)
GET		/datasets/status/:status/category/:categoryId	controllers.Datasets.listByCategoryAndStatus(categoryId: String, status: controllers.Datasets.DatasetStatus, page: Long ?= 1, q: String ?= null)
GET		/datasets/form/columns/:dataSourceId/:sourceDatasetId	controllers.Datasets.listColumnsAction(dataSourceId: String, sourceDatasetId: String)					
GET		/datasets/create/source/:sourceDatasetId		controllers.Datasets.createFormForSourceDataset(sourceDatasetId: String)
GET		/datasets/:datasetId/status						controllers.Datasets.status(datasetId: String)
GET		/datasets/$datasetId<[^\.]+>.json				controllers.Datasets.getDatasetJson(datasetId: String)
GET		/datasets/:datasetId							controllers.Datasets.show(datasetId: String)
GET		/datasets/:datasetId/edit						controllers.Datasets.editForm(datasetId: String)
POST	/datasets/:datasetId/edit						controllers.Datasets.submitEdit(datasetId: String)
POST 	/datasets/:datasetId/delete						controllers.Datasets.delete(datasetId : String)
POST	/datasets/:datasetId/refresh					controllers.Datasets.scheduleRefresh(datasetId: String)
POST	/datasets/:datasetId/notification/:notificationId	controllers.Datasets.setNotificationResult(datasetId: String, notificationId: String)

# Datasources
GET		/datasources/download							controllers.DataSources.download(searchString: String ?= "", withErrors: java.lang.Boolean ?= null, separator: String ?= ",", quote: String ?= "'", encoding: String ?= "iso-8859-1")
POST	/datasources/refresh							controllers.DataSources.refreshDatasources()
GET		/datasources									controllers.DataSources.list(q: String ?="", withErrors: java.lang.Boolean ?= null, page: Long ?= 1)
GET		/datasources/-/category/:categoryId 			controllers.DataSources.listByCategory(categoryId: String, q: String ?="", withErrors: java.lang.Boolean ?= null, page: Long ?= 1)
GET		/datasources/:dataSourceId						controllers.DataSources.listByDataSource(dataSourceId: String, q: String ?="", withErrors: java.lang.Boolean ?= null, page: Long ?= 1)
POST	/datasources/:datasourceId/refresh				controllers.DataSources.refreshDatasource(datasourceId: String)
GET		/datasources/:dataSourceId/category/$categoryId<[^\.]+>.json	controllers.DataSources.listByDataSourceAndCategoryJson(dataSourceId: String, categoryId: String)
GET		/datasources/:dataSourceId/category/:categoryId	controllers.DataSources.listByDataSourceAndCategory(dataSourceId: String, categoryId: String, q: String ?="", withErrors: java.lang.Boolean ?= null, page: Long ?= 1)

#
# Service beheer
# 

GET		/services										controllers.Services.list(q: String ?= null, isPublished: java.lang.Boolean ?= null, page: Long ?= 1)
GET		/services/:serviceId/publish					controllers.Services.publishService(serviceId: String, page: Long ?= 1)
POST	/services/:serviceId/publish					controllers.Services.submitPublishService(serviceId: String)
GET 	/services/-/create								controllers.Services.create()
POST 	/services/-/create								controllers.Services.submitCreate()
POST 	/services/:serviceId/update						controllers.Services.submitUpdate(serviceId: String)
GET		/services/:serviceId/edit						controllers.Services.edit(serviceId: String)
POST 	/services/:serviceId/delete						controllers.Services.delete(serviceId : String)

GET		/layers											controllers.Layers.list(q: String ?= null, page: Long ?= 1)
GET		/layers.json									controllers.Layers.listJson(q: String ?= null, page: Long ?= 1)
GET 	/layers/:datasetId/create						controllers.Layers.create(datasetId : String)
POST 	/layers/-/createupdate							controllers.Layers.submitCreateUpdate()
GET		/layers/:layerId/edit							controllers.Layers.edit(layerId: String)
POST 	/layers/:layerId/delete							controllers.Layers.delete(layerId : String)
GET 	/layers/:layerId/structure-item					controllers.Layers.structureItem(layerId : String, showStyleSelect: Boolean ?= true)

GET		/groups											controllers.Groups.list(q: String ?= null, page: Long ?= 1)
GET		/groups.json									controllers.Groups.listJson(q: String ?= null, page: Long ?= 1)
GET 	/groups/-/create								controllers.Groups.create()
POST 	/groups/-/createupdate							controllers.Groups.submitCreateUpdate()
GET		/groups/:groupId/edit							controllers.Groups.edit(groupId: String)
POST 	/groups/:groupId/delete							controllers.Groups.delete(groupId : String)
GET 	/groups/:groupId/structure-item					controllers.Groups.structureItem(groupId : String, showStyleSelect: Boolean ?= true)

GET		/styles											controllers.Styles.list(q: String ?= null, styleType: String ?= null, page : Long ?= 1)
GET		/styles.json									controllers.Styles.listStylesJson(page: Long ?= 1, styleType: String ?= null, q: String ?= null)
GET 	/styles/-/create								controllers.Styles.create()
POST 	/styles/-/createupdate							controllers.Styles.submitCreateUpdate()
GET		/styles/-/upload-file							controllers.Styles.uploadFileForm()
POST	/styles/-/upload-file							controllers.Styles.handleFileUploadForm()
POST	/styles/-/upload-file-raw						controllers.Styles.handleFileUploadRaw()
POST	/styles/-/validate								controllers.Styles.validateSld()
GET		/styles/:styleId/edit							controllers.Styles.edit(styleId: String)
POST 	/styles/:styleId/delete							controllers.Styles.delete(styleId : String)

# Logging
GET		/logging/messages								controllers.Logging.messages()
GET		/logging/messages/:logLevels/:page				controllers.Logging.messagesWithFilter(logLevels: String, page: Long)
GET		/logging/tasks									controllers.Logging.tasks()
GET		/logging/tasks/:page							controllers.Logging.tasksWithPaging(page: Long)


# Events:
GET		/events											controllers.Events.events()
GET		/events/:tag									controllers.Events.eventsWithTag(tag: String)

# User
GET		/user/login										controllers.User.login(r: String)
GET		/user/logout									controllers.User.logout()
POST	/user/authenticate								controllers.User.authenticate()

# Metadata
GET		/metadata/source-datasets/:sourceDatasetId		controllers.Metadata.sourceDataset(sourceDatasetId: String)

# Map static resources from the /public folder to the /assets URL path
GET		/javascriptRoutes  								controllers.Application.javascriptRoutes
GET		/doc/$file<.+\.md$>								controllers.Docs.markdown(path="/public/doc", file)
GET		/doc/*file										controllers.Docs.at(path="/public/doc", file)
GET     /assets/*file               					controllers.Assets.at(path="/public", file)
GET		/webjars/*file									controllers.WebJarAssets.at(file)
