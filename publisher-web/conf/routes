# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Dashboard
GET		/												controllers.Dashboard.index()

# Datasets
GET		/datasets										controllers.Datasets.list(page: Long ?= 1)
GET		/datasets/-/create								controllers.Datasets.createForm()
POST	/datasets/-/create								controllers.Datasets.submitCreate()
GET		/datasets/status/with-messages					controllers.Datasets.listWithMessages(page: Long ?= 1)
GET		/datasets/category/:categoryId					controllers.Datasets.listByCategory(categoryId: String, page: Long ?= 1)
GET		/datasets/status/with-messages/category/:categoryId	controllers.Datasets.listByCategoryWithMessages(categoryId: String, page: Long ?= 1)
GET		/datasets/form/columns/:dataSourceId/:sourceDatasetId	controllers.Datasets.listColumnsAction(dataSourceId: String, sourceDatasetId: String)					
GET		/datasets/create/source/:sourceDatasetId		controllers.Datasets.createFormForSourceDataset(sourceDatasetId: String)
GET		/datasets/:datasetId/status						controllers.Datasets.status(datasetId: String)
GET		/datasets/$datasetId<[^\.]+>.json				controllers.Datasets.getDatasetJson(datasetId: String)
GET		/datasets/:datasetId							controllers.Datasets.show(datasetId: String)
GET		/datasets/:datasetId/edit						controllers.Datasets.editForm(datasetId: String)
POST	/datasets/:datasetId/edit						controllers.Datasets.submitEdit(datasetId: String)
GET 	/datasets/:datasetId/delete						controllers.Datasets.delete(datasetId : String)
POST	/datasets/:datasetId/refresh					controllers.Datasets.scheduleRefresh(datasetId: String)
POST	/datasets/:datasetId/notification/:notificationId	controllers.Datasets.setNotificationResult(datasetId: String, notificationId: String)

# Datasources
# http://localhost:9000/datasources/searching?searchString=gevonden
GET		/datasources/searching							controllers.DataSources.search(searchString: String ?="", page: Long ?= 1)
GET		/datasources									controllers.DataSources.list(searchString: String ?="", page: Long ?= 1)
GET		/datasources/-/category/:categoryId 			controllers.DataSources.listByCategory(categoryId: String, searchString: String ?="", page: Long ?= 1)
GET		/datasources/:dataSourceId						controllers.DataSources.listByDataSource(dataSourceId: String, searchString: String ?="", page: Long ?= 1)
GET		/datasources/:dataSourceId/category/$categoryId<[^\.]+>.json	controllers.DataSources.listByDataSourceAndCategoryJson(dataSourceId: String, categoryId: String)
GET		/datasources/:dataSourceId/category/:categoryId	controllers.DataSources.listByDataSourceAndCategory(dataSourceId: String, categoryId: String, searchString: String ?="", page: Long ?= 1)

#
# Service beheer
# 

GET		/services										controllers.Services.list()
GET 	/services/-/create								controllers.Services.createForm()


GET		/layers											controllers.Layers.list()
GET 	/layers/-/create								controllers.Layers.createForm()


GET		/groups											controllers.Groups.list()
GET 	/groups/-/create								controllers.Groups.createForm()


GET		/styles											controllers.Styles.list()
GET 	/styles/-/create								controllers.Styles.createForm()
POST 	/styles/-/create								controllers.Styles.submitCreate()
GET		/styles/:styleId/edit							controllers.Styles.editForm(styleId: String)
POST	/styles/:styleId/edit							controllers.Styles.submitEdit(styleId: String)
GET 	/styles/:styleId/delete							controllers.Styles.delete(styleId : String)


GET		/tiledlayers									controllers.Tiledlayers.list()
GET 	/tiledlayers/-/create							controllers.Tiledlayers.createForm()

# Logging
GET		/logging/messages								controllers.Logging.messages()
GET		/logging/messages/:logLevels/:page				controllers.Logging.messagesWithFilter(logLevels: String, page: Long)
GET		/logging/tasks									controllers.Logging.tasks()

# Events:
GET		/events											controllers.Events.events()
GET		/events/:tag									controllers.Events.eventsWithTag(tag: String)

# User
GET		/user/login										controllers.User.login(r: String)
GET		/user/logout									controllers.User.logout()
POST	/user/authenticate								controllers.User.authenticate()

# Map static resources from the /public folder to the /assets URL path
GET		/javascriptRoutes  								controllers.Application.javascriptRoutes
GET     /assets/*file               					controllers.Assets.at(path="/public", file)
GET		/lib/*file										controllers.WebJarAssets.at(file)
