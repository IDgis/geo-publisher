buildscript {
	repositories {
		jcenter()
	}

	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
	}
}


apply plugin: 'eclipse'
apply plugin: 'idea'

if(hasProperty('latest')) {
	project.version = 'latest'
} else {
	apply plugin: GitVersion
}

repositories {
	mavenCentral()
}

apply plugin: DockerRemoteConfig

import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

task pullJavaImage(type: DockerPullImage) {
	repository 'azul/zulu-openjdk'
	tag '8'
}

ext {
	junitVersion = '4.11'
	scalaAbiVersion = '2.11'
	akkaVersion = '2.3.9'
	jacksonVersion = '2.8.8'
	guavaVersion = '17.0'
	h2Version = '1.4.180'
	jodatimeVersion = '2.3'
	geoserverVersion = '2.22.2'
	gtVersion = '28.2'
	commonsIOVersion = '2.4'
	deegreeVersion = '3.4-RC1'
	logbackVersion= '1.1.2'
	jettyVersion = '9.2.2.v20140723'
	curatorVersion = '2.7.1'
	querydslVersion = '3.4.1'
	provisionRegistrationVersion = '1.1.3'
	jolokiaVersion = '1.3.7'
	postgresVersion = '42.2.18'
}

configure([
	project(':publisher-web'),
	project(':publisher-metadata')]) {
	
	repositories {
		jcenter()
		maven {
			name "typesafe-maven-release"
			url "https://repo.typesafe.com/typesafe/maven-releases"
		}
		ivy {
			name "typesafe-ivy-release"
			url "https://repo.typesafe.com/typesafe/ivy-releases"
			layout "ivy"
		}
	}
}

subprojects {
	apply plugin: 'publishing'

	version = rootProject.version

	repositories {	
		mavenCentral artifactUrls: ['http://maven.geotoolkit.org/', 'https://repo.osgeo.org/repository/release/']
	}
	
	publishing {
		repositories {
			maven {
				name = "GitHubPackages"
				url = "https://maven.pkg.github.com/IDgis/geo-publisher"
				credentials {
					username = System.getenv("GITHUB_USER") ?: ghUser
					password = System.getenv("GITHUB_TOKEN") ?: ghKey
				}
			}
		}
	}
}

// base configuration for all non Play subprojects
configure(subprojects - project(':publisher-web') - project(':publisher-metadata')) {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	
	// export tests as artifact
	configurations {
		testArtifact
	}

	task testJar(type: Jar) {
		baseName = "${project.name}-test"
		from sourceSets.test.output
	}

	artifacts {
		testArtifact testJar
	}
	
	// add ${project.name} and ${project.version} to manifest
	jar {
		manifest {
			attributes("Implementation-Title": project.name)
			if(project.version) {
				attributes("Implementation-Version": project.version)
			}
		}
	}
}

import org.gradle.plugins.ide.eclipse.model.SourceFolder

// enable QueryDSL annotation processor
configure([
	project(':publisher-domain'),
	project(':publisher-database'),
	project(':publisher-service')]) {
	
	configurations {
		apt
	}
	
	dependencies {
		apt "com.mysema.querydsl:querydsl-apt:${querydslVersion}"
	}
	
	compileJava {
		ext.aptDir = new File(project.buildDir, 'apt')

		options.compilerArgs << '-processor' << 'com.mysema.query.apt.QuerydslAnnotationProcessor' 
		options.compilerArgs << '-processorpath' << configurations.apt.asPath 
		options.compilerArgs << '-s' << ext.aptDir
	}

	compileJava.doFirst {
		ext.aptDir.mkdirs()
	}
	
	eclipse.classpath.file {
		whenMerged { classpath ->
		        classpath.entries.add(new SourceFolder('build/apt', null))
    		}
	}
}

project(':publisher-test') {
	dependencies {
		compile "com.typesafe.akka:akka-actor_${scalaAbiVersion}:${akkaVersion}"
		compile "junit:junit:${junitVersion}"
		compile 'org.mockito:mockito-core:1.10.19'
	}
}

project(':publisher-commons') {
	dependencies {
		testCompile project(':publisher-test')
		testCompile "com.typesafe.akka:akka-testkit_${scalaAbiVersion}:${akkaVersion}"
		testCompile "com.typesafe.akka:akka-slf4j_${scalaAbiVersion}:${akkaVersion}"
		testCompile "ch.qos.logback:logback-classic:${logbackVersion}"
		testCompile "com.h2database:h2:${h2Version}"
	
		compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
		compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"
		compile "com.typesafe.akka:akka-actor_${scalaAbiVersion}:${akkaVersion}"
		compile 'org.apache.commons:commons-lang3:3.3.2'
		compile "com.google.guava:guava:${guavaVersion}"
		compile 'com.jolbox:bonecp:0.8.0.RELEASE'
		compile "commons-io:commons-io:${commonsIOVersion}"
		compile 'org.aspectj:aspectjrt:1.8.0'
		compile 'org.codehaus.woodstox:woodstox-core-lgpl:4.1.5'
	}
}

project(':publisher-domain') {
	dependencies {
		testCompile "junit:junit:${junitVersion}"
	
		compile project(':publisher-commons');
		compile "com.google.guava:guava:${guavaVersion}"
		compile "com.mysema.querydsl:querydsl-core:${querydslVersion}"
		compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
		compile "joda-time:joda-time:${jodatimeVersion}"
		compile "com.typesafe.akka:akka-actor_${scalaAbiVersion}:${akkaVersion}"
	}
}

// extract schema files from geoserver artifact
project(':publisher-schemas') {
	configurations {
		schemas {
			transitive = false
		}
	}
	
	dependencies {
		testCompile "junit:junit:${junitVersion}"
		
		schemas "org.geoserver:gs-main:${geoserverVersion}"
	}
	
	task unpackSchemas << {
		configurations.schemas.resolvedConfiguration.resolvedArtifacts.each { artifact ->
			project.copy {
				from zipTree(artifact.file).matching {
					include 'schemas/**/*'
				}
				eachFile {
					it.path = it.path.replace('schemas/', 'schemas/geoserver/')
				}
				includeEmptyDirs = false
				into sourceSets.main.output.resourcesDir
			}
		}
	}
	
	processResources.dependsOn(unpackSchemas)
}

project(':publisher-web') {
	apply plugin: PublisherPlay
	
	def playVersion = '2.3.4'
	
	model {
		components {
			play {
				platform play: playVersion, java: '1.8'
				
				sources {
					twirlTemplates {
						defaultImports = TwirlImports.JAVA
					}
				}
			}
		}
	}
	
	dependencies {
		play project(':publisher-domain')
		play project(':publisher-schemas')
		play "com.typesafe.play:play-java-jdbc_${scalaAbiVersion}:${playVersion}"
		play "com.typesafe.play:play-cache_${scalaAbiVersion}:${playVersion}"
		play "com.typesafe.play:play-java-ws_${scalaAbiVersion}:${playVersion}"
		play "org.webjars:webjars-play_${scalaAbiVersion}:2.3.0"
		play 'org.webjars:bootstrap:3.2.0'
		play 'org.webjars:dojo:1.10.0'
		play "com.typesafe.akka:akka-remote_${scalaAbiVersion}:${akkaVersion}"
		play 'org.pegdown:pegdown:1.5.0'
		play 'org.webjars:ace:01.08.2014'
		play 'com.google.code.gson:gson:2.8.2'
	}
}

project(':publisher-provider:publisher-provider-app') {
	apply plugin: 'maven-publish'
	apply plugin: 'application'
	apply plugin: DockerRemoteConfig
	
	mainClassName = 'nl.idgis.publisher.provider.App'
	
	jar {
		manifest {
			attributes('Main-Class': 'nl.idgis.publisher.provider.App')
		}
	}
	
	publishing {
		publications {
			gpr(MavenPublication) {
				from(components.java)
			}
		}
	}

	dependencies {
		testCompile project(':publisher-test')
		testCompile "junit:junit:${junitVersion}"
		
		compile project(':publisher-commons')
		compile project(':publisher-provider:publisher-provider-protocol')
		compile "commons-io:commons-io:${commonsIOVersion}"
		compile 'com.fasterxml:aalto-xml:0.9.9'
		compile "org.postgresql:postgresql:${postgresVersion}"
		compile 'com.oracle:ojdbc7:12.1.0.1.0'
		compile("org.deegree:deegree-sqldialect-oracle:${deegreeVersion}") {
			exclude group: 'org.deegree', module: 'deegree-sqldialect-commons'
			exclude group: 'org.deegree', module: 'deegree-core-db'
		}
		compile("org.deegree:deegree-core-geometry:${deegreeVersion}") {
			// dependencies of deegree-core-commons
			exclude group: 'org.deegree', module: 'deegree-core-workspace'
			exclude group: 'org.codehaus.woodstox', module: 'woodstox-core-lgpl'
			exclude group: 'org.apache.ws.commons.axiom', module: 'axiom-impl'
			exclude group: 'org.apache.ws.commons.axiom', module: 'axiom-api'
			exclude group: 'com.sun.xml.fastinfoset', module: 'FastInfoset'
			exclude group: 'jaxen', module: 'jaxen'
			exclude group: 'xerces', module: 'xercesImpl'
			exclude group: 'commons-dbcp', module: 'commons-dbcp'
			exclude group: 'org.apache.httpcomponents', module: 'httpclient'
			exclude group: 'commons-pool', module: 'commons-pool'
			exclude group: 'jogl', module: 'jogl'
			exclude group: 'commons-cli', module: 'commons-cli'
			exclude group: 'org.reflections', module: 'org.reflections'
			exclude group: 'com.google.code.gson', module: 'gson'
			exclude group: 'org.deegree', module: 'deegree-ogcschemas'
			exclude group: 'xalan', module: 'xalan'
			exclude group: 'xalan', module: 'serializer'
			
			// dependencies of deegree-core-cs
			exclude group: 'org.deegree', module: 'deegree-core-annotations'
			exclude group: 'jai', module: 'jai-core'
			exclude group: 'jgridshift', module: 'jgridshift'
			exclude group: 'junit', module: 'junit'
			exclude group: 'org.postgis', module: 'postgis-jdbc'
			exclude group: 'postgresql', module: 'postgresql'
		}
		compile "ch.qos.logback:logback-classic:${logbackVersion}"
		compile "com.typesafe.akka:akka-slf4j_${scalaAbiVersion}:${akkaVersion}"
		
		runtime 'org.aspectj:aspectjweaver:1.8.0'
	}
	
	task copyConf(type: Copy) {
		from 'src/main/resources/conf'
		into "${project.buildDir}/docker/conf"
	}
	
	task unpackTar(type: Copy) {
		dependsOn distTar
		
		from tarTree(distTar.archivePath)
		into "${project.buildDir}/docker"
	}
	
	task copyContext(type: Copy) {
		from 'src/main/docker'
		into "${project.buildDir}/docker"
	}
	
	task createDockerfile(type: Dockerfile) {
		destFile = file("${project.buildDir}/docker/Dockerfile")
		from 'azul/zulu-openjdk:8'
		workingDir '/etc/geo-publisher/provider/'
		copyFile "publisher-provider-app-${project.version}", '/opt'
		copyFile 'conf', '/etc/geo-publisher/provider'
		runCommand 'chmod +x /opt/bin/publisher-provider-app'
		defaultCommand "/opt/bin/publisher-provider-app"
	}
	
	task buildImage(type: DockerBuildImage) {
		dependsOn rootProject.pullJavaImage, createDockerfile, unpackTar, copyContext, copyConf
		
		inputDir = file("${project.buildDir}/docker")
		tag = "idgis/geopublisher_provider:${project.version}"
	}

	task pushImage(type: DockerPushImage) {
		dependsOn buildImage
		imageName = "idgis/geopublisher_provider:${project.version}"
	}
}

project(':publisher-provider:publisher-provider-protocol') {
	dependencies {
		compile project(':publisher-commons')
		compile project(':publisher-domain')
	}
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

project(':publisher-database') {
	// publish jar (includes required *.sql files)
	apply plugin: 'maven-publish'
	apply plugin: DockerRemoteConfig
	
	publishing {
		publications {
			gpr(MavenPublication) {
				from(components.java)
			}
		}
	}

	configurations {
		sql
		testCompile.extendsFrom(sql)
	}

	dependencies {
		sql "com.h2database:h2:${h2Version}"
		
		testCompile project(':publisher-test')
		testCompile project(path: ':publisher-commons', configuration: 'testArtifact')
		testCompile "com.typesafe.akka:akka-slf4j_${scalaAbiVersion}:${akkaVersion}"
	
		compile project(':publisher-commons')
		compile project(':publisher-provider:publisher-provider-protocol')
		compile "com.mysema.querydsl:querydsl-sql:${querydslVersion}"
		compile "com.typesafe.akka:akka-slf4j_${scalaAbiVersion}:${akkaVersion}"
	}
	
	task generateDatabaseScript(type: ConcatSQLTask) {
		inputDir = 'src/main/resources/nl/idgis/publisher/database'
		buildDir = 'database-script'
		destFileName = 'publisher.sql'
		databaseType = 'H2'
	}
	
	def databaseDirectory = new File(project.buildDir, '/database')
	def databaseDriver = 'org.h2.Driver'
	def databaseUrl = "jdbc:h2:${databaseDirectory}/publisher;DATABASE_TO_UPPER=false;MODE=PostgreSQL"
	def databaseUser = 'sa'
	def databasePassword = ''
	
	task prepareDatabase(dependsOn: generateDatabaseScript) << {
		if(databaseDirectory.exists()) {
			databaseDirectory.deleteDir()
		}
	
		ant.sql(
			classpath: configurations.sql.asPath,
			driver: databaseDriver,
			url: databaseUrl,
			userid: databaseUser,
			password: databasePassword,
			src: "${project.buildDir}/database-script/publisher.sql")
	}
	
	task generateMetamodel(type: MetaDataExporterTask, dependsOn: prepareDatabase) {
		configuration = configurations.sql
		driverClassName = databaseDriver
		url = databaseUrl
		password = databasePassword
		user = databaseUser
		targetDir = new File(project.buildDir, 'metamodel')
		packageName = 'nl.idgis.publisher.database'
	}
	
	compileJava.dependsOn(generateMetamodel)
	
	// generate properties file for nl.idgis.publisher.database.DatabaseTest
	task generateDatabaseProperties << {
		ant.propertyfile(file: new File(databaseDirectory, 'publisher.properties')) {
			entry(key: 'database.driver', value: "${databaseDriver}")
			entry(key: 'database.url', value: "${databaseUrl}")
			entry(key: 'database.user', value: "${databaseUser}")
			entry(key: 'database.password', value: "${databasePassword}")
		}
	}
	
	processTestResources.dependsOn(generateDatabaseProperties)
	
	sourceSets {
		main {
			java {
				// compile QueryDSL metamodel sources
				srcDir new File(project.buildDir, 'metamodel')
			}
		}
	}
	
	task copySql(type: Copy) {
		from 'src/main/resources/nl/idgis/publisher/database'
		into "${project.buildDir}/docker/sql"
	}
	
	task copyStartScript(type: Copy) {
		from 'src/main/bash/start.sh'
		into "${project.buildDir}/docker"
	}
	
	task createDockerfile(type: Dockerfile) {
		destFile = project.file("${project.buildDir}/docker/Dockerfile")
		from 'ubuntu:xenial'
		runCommand '''\
			apt-get update && \
			apt-get -qy install \
				postgresql-9.5 \
				postgresql-client-9.5 \
				postgresql-9.5-postgis-2.2 && \
			pg_dropcluster --stop 9.5 main && \
			pg_createcluster --start -e UTF-8 9.5 main
			'''
		copyFile 'sql', '/opt/sql'
		copyFile 'start.sh', '/opt/'
		runCommand 'chmod u+x /opt/start.sh'
		user 'postgres'
		runCommand 'echo "host all all 0.0.0.0/0 md5" >> /etc/postgresql/9.5/main/pg_hba.conf'
		runCommand 'echo "listen_addresses=\'*\'" >> /etc/postgresql/9.5/main/postgresql.conf'
		environmentVariable 'PG_DATABASE', 'publisher'
		environmentVariable 'PG_USER', 'publisher'
		environmentVariable 'PG_PASSWORD', 'publisher'
		environmentVariable 'PG_VERSION_SCHEMA', 'publisher'
		environmentVariable 'PG_VERSION_TABLE', 'version'
		exposePort 5432
		defaultCommand '/bin/bash', '-c', '/opt/start.sh'
	}
	
	task pullUbuntuImage(type: DockerPullImage) {
		repository 'ubuntu'
		tag 'xenial'
	}
	
	task buildImage(type: DockerBuildImage) {
		dependsOn pullUbuntuImage, createDockerfile, copySql, copyStartScript
		inputDir = project.file("${project.buildDir}/docker")
		tag = "idgis/geopublisher_database:${project.version}"
	}

	task pushImage(type: DockerPushImage) {
		dependsOn buildImage
		imageName = "idgis/geopublisher_database:${project.version}"
	}
}

project(':publisher-monitor') {
	apply plugin: 'application'
	apply plugin: DockerRemoteConfig
	
	mainClassName = 'nl.idgis.publisher.monitor.WMSTest'
	
	task unpackTar(type: Copy) {
		dependsOn distTar

		from tarTree(distTar.archivePath)
		into "${project.buildDir}/docker"
	}
	
	task createDockerfile(type: Dockerfile) {
		destFile = file("${project.buildDir}/docker/Dockerfile")
		from 'azul/zulu-openjdk:8'
		copyFile "publisher-monitor-${project.version}", '/opt'
		runCommand 'chmod +x /opt/bin/publisher-monitor'
		entryPoint '/opt/bin/publisher-monitor'
	}

	task buildImage(type: DockerBuildImage) {
		dependsOn rootProject.pullJavaImage, createDockerfile, unpackTar

		inputDir = file("${project.buildDir}/docker")
		tag = "idgis/geopublisher_monitor:${project.version}"
	}

	task pushImage(type: DockerPushImage) {
		dependsOn buildImage
		imageName = "idgis/geopublisher_monitor:${project.version}"
	}
	
	dependencies {
		compile 'org.springframework:spring-core:4.3.3.RELEASE'
		compile "org.postgresql:postgresql:${postgresVersion}"
		compile 'commons-io:commons-io:2.5'
	}
}

project(':publisher-service') {
	apply plugin: 'application'
	apply plugin: DockerRemoteConfig
	
	mainClassName = 'nl.idgis.publisher.ServiceApp'
	applicationDefaultJvmArgs = ["-javaagent:/opt/bin/agents/jolokia-jvm-${jolokiaVersion}-agent.jar=host=*"]

	configurations {
		webapp
		agents
	}

	dependencies {
		agents(group: 'org.jolokia', name: 'jolokia-jvm', version: jolokiaVersion, classifier: 'agent') {
			transitive = false
		}
	
		webapp "org.geoserver.web:gs-web-app:${geoserverVersion}@war"
		
		testCompile project(':publisher-test')
		testCompile project(path: ':publisher-commons', configuration: 'testArtifact')
		testCompile project(path: ':publisher-database', configuration: 'testArtifact')
		testCompile 'com.spotify:docker-client:8.8.0'
		testCompile "com.h2database:h2:${h2Version}"
		testCompile "com.typesafe.akka:akka-testkit_${scalaAbiVersion}:${akkaVersion}"
		testCompile 'com.google.jimfs:jimfs:1.0'
		testCompile('org.opengeo:geodb:0.8') {
			exclude group: 'xerces', module: 'xercesImpl'
		}
		testCompile "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
		testCompile "org.eclipse.jetty:jetty-plus:${jettyVersion}"
		testCompile 'org.apache.commons:commons-dbcp2:2.1.1'
		
		compile project(':publisher-commons')
		compile project(':publisher-database')		
		compile project(':publisher-domain')
		compile "commons-io:commons-io:${commonsIOVersion}"
		compile 'commons-codec:commons-codec:1.9'
		compile "org.postgresql:postgresql:${postgresVersion}"
		compile "com.typesafe.akka:akka-remote_${scalaAbiVersion}:${akkaVersion}"
		compile "com.typesafe.akka:akka-slf4j_${scalaAbiVersion}:${akkaVersion}"
		compile "ch.qos.logback:logback-classic:${logbackVersion}"
		compile 'com.ning:async-http-client:1.9.8'
		compile "org.apache.curator:curator-recipes:${curatorVersion}"
		compile "org.apache.curator:curator-framework:${curatorVersion}"
		compile 'org.quartz-scheduler:quartz:2.2.1'
		compile 'com.google.code.gson:gson:2.8.2'
		compile 'org.apache.httpcomponents:httpclient:4.5.10'
	}
	
	// extract geoserver webapp for nl.idgis.publisher.service.geoserver.GeoServerTestHelper
	task extractWebapp << {
		configurations.webapp.resolvedConfiguration.resolvedArtifacts.each { artifact ->
			project.copy {
				from zipTree(artifact.file)
				into new File(project.buildDir, 'geoserver')
			}
		}
	}
	
	processTestResources.dependsOn(extractWebapp)
	
	task unpackTar(type: Copy) {
		dependsOn distTar

		from tarTree(distTar.archivePath)
		into "${project.buildDir}/docker"
	}
	
	task copyContext(type: Copy) {
		from 'src/main/docker'
		into "${project.buildDir}/docker"
	}
	
	task copyAgents(type: Copy) {
		from configurations.agents
		into "${project.buildDir}/docker/agents"
	}

	task createDockerfile(type: Dockerfile) {
		destFile = file("${project.buildDir}/docker/Dockerfile")
		from 'azul/zulu-openjdk:8'
		copyFile "publisher-service-${project.version}", '/opt'
		copyFile 'agents', "/opt/bin/agents"
		copyFile 'start.sh', '/opt'
		runCommand 'chmod +x /opt/bin/publisher-service && chmod +x /opt/start.sh'
		exposePort 2552 // Akka
		exposePort 4242 // Provider
		exposePort 8778 // Jolokia
		defaultCommand "/opt/start.sh"
	}

	task buildImage(type: DockerBuildImage) {
		dependsOn rootProject.pullJavaImage, createDockerfile, unpackTar, copyContext, copyAgents

		inputDir = file("${project.buildDir}/docker")
		tag = "idgis/geopublisher_service:${project.version}"
	}

	task pushImage(type: DockerPushImage) {
		dependsOn buildImage
		imageName = "idgis/geopublisher_service:${project.version}"
	}
}

project(':publisher-metadata') {
	apply plugin: PublisherPlay
	
	def playVersion = '2.4.3'
	
	ext {
		playHttpPort = 9010
	}
	
	model {
		components {
			play {
				platform play: playVersion, java: '1.8'
				injectedRoutesGenerator = true
			}
		}
	}
	
	dependencies {
		playTest project(':publisher-test')
		playTest 'com.github.lookfirst:sardine:5.7'
	
		play project(':publisher-database')
		play "nl.idgis.dav:play-simple-webdav_${scalaAbiVersion}:1.1.0"
		play "com.typesafe.play:play-java-jdbc_2.11:${playVersion}"
		play "com.typesafe.play:play-cache_2.11:${playVersion}"
		play "com.typesafe.play:play-java-ws_2.11:${playVersion}"
		play "com.typesafe.play:play-jdbc-evolutions_2.11:${playVersion}"
		play "org.postgresql:postgresql:${postgresVersion}"
	}
}

configure([
	project(':publisher-metadata'),
	project(':publisher-web')]) {

	apply plugin: 'eclipse'
	
	eclipse {
		classpath {
			plusConfigurations += [ configurations.play ]
			plusConfigurations += [ configurations.playTest ]
			
			file {
				beforeMerged { classpath ->
					classpath.entries += [
						new SourceFolder("app", null), 
						new SourceFolder("test", null), 
						new SourceFolder("build/playBinary/src/compilePlayBinaryRoutes", null),
						new SourceFolder("build/playBinary/src/compilePlayBinaryTwirlTemplates", null)
					]
				}
			}
		}
		
		it.project {
			natures 'org.scala-ide.sdt.core.scalanature', 'org.eclipse.jdt.core.javanature'
		}
	}
}

project(':publisher-geoserver') {
	apply plugin: DockerRemoteConfig

	configurations {
		geoserverWebapp
		provisioningWebapp
		geoserver
	}
	
	dependencies {
		geoserverWebapp "org.geoserver.web:gs-web-app:${geoserverVersion}@war"
		provisioningWebapp "nl.idgis.sys:provisioning-registration-war:${provisionRegistrationVersion}@war"
		
		geoserver "org.geoserver.extension:gs-charts:${geoserverVersion}"
		geoserver "org.geotools:gt-charts:${gtVersion}"
		geoserver "jfree:eastwood:1.1.1-20090908"
		geoserver "org.geoserver.extension:gs-dxf-core:${geoserverVersion}"
		geoserver "org.geoserver.extension:gs-wps-core:${geoserverVersion}"
		geoserver "org.geoserver.extension:gs-web-wps:${geoserverVersion}"
		geoserver "org.geotools:gt-process-geometry:${gtVersion}"
		geoserver "org.geotools.xsd:gt-xsd-wps:${gtVersion}"
		geoserver "org.geotools.ogc:net.opengis.wps:${gtVersion}"
		geoserver "xalan:serializer:2.7.1"
		geoserver "org.geoserver.extension:gs-geopkg-output:${geoserverVersion}"
		geoserver "org.geoserver.community:gs-mbtiles:${geoserverVersion}"
		geoserver "org.geotools:gt-mbtiles:${gtVersion}"
		geoserver "org.geoserver.community:gs-geopkg:${geoserverVersion}"
	}

	task copyDockerContext(type: Copy) {
		from 'src/main/docker'
		into "${project.buildDir}/docker"
	}
	
	task copyProvisioningWebapp(type: Copy) {
		from configurations.provisioningWebapp.collect { zipTree(it) }
		into "${project.buildDir}/docker/webapps/provisioning-registration-war"
	}
	
	task copyGeoserverWebapp(type: Copy) {
		from configurations.geoserverWebapp.collect { zipTree(it) }
		into "${project.buildDir}/docker/webapps/geoserver"
	}
	
	task copyEsriFonts(type: Copy) {
		dependsOn copyGeoserverWebapp
	
		from 'src/main/esri_fonts'
		into "${project.buildDir}/docker/webapps/geoserver/data/styles"
	}
	
	task copyGeoserverDependencies(type: Copy) {
		dependsOn copyGeoserverWebapp
	
		from configurations.geoserver
		into "${project.buildDir}/docker/webapps/geoserver/WEB-INF/lib"
	}
	
	task moveJdbcDriver {
		dependsOn copyGeoserverWebapp
		
		doLast {
			def jdbcDriver = fileTree(
				dir: "${project.buildDir}/docker/webapps/geoserver/WEB-INF/lib", 
				include: 'postgresql*').singleFile
				
			file("${project.buildDir}/docker/lib").mkdirs()			
			jdbcDriver.renameTo("${project.buildDir}/docker/lib/${jdbcDriver.name}")
		}
	}
	
	task prepareDockerContext {
		dependsOn copyDockerContext, copyProvisioningWebapp, copyEsriFonts, copyGeoserverDependencies, moveJdbcDriver
	}
	
	task buildImage(type: DockerBuildImage) {
		dependsOn rootProject.pullJavaImage, prepareDockerContext
		inputDir = project.file("${project.buildDir}/docker")
		tag = "idgis/geopublisher_geoserver:${project.version}"
	}

	task pushImage(type: DockerPushImage) {
		dependsOn buildImage
		imageName = "idgis/geopublisher_geoserver:${project.version}"
	}
}

project(':publisher-console') {
	apply plugin: 'application'
	apply plugin: DockerRemoteConfig
	
	mainClassName = 'nl.idgis.publisher.console.App'
	
	dependencies {
		compile "org.jolokia:jolokia-client-java:${jolokiaVersion}"
		compile 'commons-logging:commons-logging:1.2'
	}
	
	task unpackTar(type: Copy) {
		dependsOn distTar

		from tarTree(distTar.archivePath)
		into "${project.buildDir}/docker"
	}
	
	task createDockerfile(type: Dockerfile) {
		destFile = file("${project.buildDir}/docker/Dockerfile")
		from 'azul/zulu-openjdk:8'
		copyFile "publisher-console-${project.version}", '/opt'
		runCommand 'chmod +x /opt/bin/publisher-console'
		entryPoint "/opt/bin/publisher-console"
	}
	
	task buildImage(type: DockerBuildImage) {
		dependsOn rootProject.pullJavaImage, createDockerfile, unpackTar
		
		inputDir = file("${project.buildDir}/docker")
		tag = "idgis/geopublisher_console:${project.version}"
	}

	task pushImage(type: DockerPushImage) {
		dependsOn buildImage
		imageName = "idgis/geopublisher_console:${project.version}"
	}
}

project(':publisher-database-cleanup') {
	apply plugin: 'application'
	apply plugin: DockerRemoteConfig
	
	mainClassName = 'nl.idgis.publisher.database.cleanup.App'
	
	dependencies {
		compile "org.postgresql:postgresql:${postgresVersion}"
		compile 'org.slf4j:slf4j-api:1.7.25'
		compile 'ch.qos.logback:logback-classic:1.2.3'
		compile 'ch.qos.logback:logback-core:1.2.3'
		compile 'commons-io:commons-io:2.6'
	}
	
	task unpackTar(type: Copy) {
		dependsOn distTar

		from tarTree(distTar.archivePath)
		into "${project.buildDir}/docker"
	}
	
	task createDockerfile(type: Dockerfile) {
		destFile = file("${project.buildDir}/docker/Dockerfile")
		from 'azul/zulu-openjdk:8'
		copyFile "publisher-database-cleanup-${project.version}", '/opt'
		runCommand 'chmod +x /opt/bin/publisher-database-cleanup'
		entryPoint "/opt/bin/publisher-database-cleanup"
	}
	
	task buildImage(type: DockerBuildImage) {
		dependsOn rootProject.pullJavaImage, createDockerfile, unpackTar
		
		inputDir = file("${project.buildDir}/docker")
		tag = "idgis/geopublisher_database_cleanup:${project.version}"
	}

	task pushImage(type: DockerPushImage) {
		dependsOn buildImage
		imageName = "idgis/geopublisher_database_cleanup:${project.version}"
	}
}

// measure task execution time
if(!gradle.startParameter.continuous) {
	gradle.addListener(new TimingListener())
}