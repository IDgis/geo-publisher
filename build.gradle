subprojects {
	repositories {
		jcenter()
		mavenCentral()
		maven {
			name "typesafe-maven-release"
			url "https://repo.typesafe.com/typesafe/maven-releases"
		}
		ivy {
			name "typesafe-ivy-release"
			url "https://repo.typesafe.com/typesafe/ivy-releases"
			layout "ivy"
		}
		maven {
			name "idgis-public"
			url "http://nexus.idgis.eu/content/groups/public/"
			credentials {
				username nexusUser 
				password nexusPassword
			}
		}
		maven {
			name "idgis-restricted"
			url "http://nexus.idgis.eu/content/groups/restricted/"
			credentials {
				username nexusUser 
				password nexusPassword
			}
		}
	}
}

configure(subprojects - project(':publisher-web')) {
	apply plugin: 'java'
}

def junitVersion = '4.11'
def scalaAbiVersion = '2.11'
def akkaVersion = '2.3.9'
def jacksonVersion = '2.3.3'
def guavaVersion = '17.0'
def h2Version = '1.4.180'
def jodatimeVersion = '2.3'
def querydslVersion = '3.4.1'
def geoserverVersion = '2.6.1-gpo-3'
def commonsIOVersion = '2.4'
def deegreeVersion = '3.4-pre13'
def logbackVersion= '1.1.2'

project(':publisher-test') {
	dependencies {
		compile "com.typesafe.akka:akka-actor_${scalaAbiVersion}:${akkaVersion}"
		compile "junit:junit:${junitVersion}"
		compile 'org.mockito:mockito-core:1.10.19'
	}
}

project(':publisher-commons') {
	dependencies {
		testCompile project(':publisher-test')
		testCompile "com.typesafe.akka:akka-testkit_${scalaAbiVersion}:${akkaVersion}"
		testCompile "com.typesafe.akka:akka-slf4j_${scalaAbiVersion}:${akkaVersion}"
		testCompile "ch.qos.logback:logback-classic:${logbackVersion}"
		testCompile "com.h2database:h2:${h2Version}"
	
		compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
		compile "com.typesafe.akka:akka-actor_${scalaAbiVersion}:${akkaVersion}"
		compile 'org.apache.commons:commons-lang3:3.3.2'
		compile "com.google.guava:guava:${guavaVersion}"
		compile 'com.jolbox:bonecp:0.8.0.RELEASE'
		compile "commons-io:commons-io:${commonsIOVersion}"
		compile 'org.aspectj:aspectjrt:1.8.0'
		compile 'org.codehaus.woodstox:woodstox-core-lgpl:4.1.5'
	}
}

project(':publisher-domain') {
	dependencies {
		testCompile "junit:junit:${junitVersion}"
	
		compile project(':publisher-commons');
		compile "com.google.guava:guava:${guavaVersion}"
		compile "com.mysema.querydsl:querydsl-core:${querydslVersion}"
		compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
		compile "joda-time:joda-time:${jodatimeVersion}"
		compile "com.typesafe.akka:akka-actor_${scalaAbiVersion}:${akkaVersion}"
	}
}

project(':publisher-schemas') {
	configurations {
		schemas {
			transitive = false
		}
	}
	
	dependencies {
		testCompile "junit:junit:${junitVersion}"
		
		schemas "org.geoserver:gs-main:${geoserverVersion}"
	}
	
	task unpackSchemas << {
		configurations.schemas.resolvedConfiguration.resolvedArtifacts.each { artifact ->
			project.copy {
				from zipTree(artifact.file).matching {
					include 'schemas/**/*'
				}
				eachFile {
					it.path = it.path.replace('schemas/', 'schemas/geoserver/')
				}
				includeEmptyDirs = false
				into sourceSets.main.output.resourcesDir
			}
		}
	}
	
	processResources.dependsOn(unpackSchemas)
}

project(':publisher-web') {
	apply plugin: PublisherPlay
	
	def playVersion = '2.3.4'
	
	model {
		components {
			play {
				platform play: playVersion, java: '1.8'
			}
		}
	}
	
	dependencies {
		play project(':publisher-domain')
		play project(':publisher-schemas')
		play "com.typesafe.play:play-java-jdbc_${scalaAbiVersion}:${playVersion}"
		play "com.typesafe.play:play-cache_${scalaAbiVersion}:${playVersion}"
		play "com.typesafe.play:play-java-ws_${scalaAbiVersion}:${playVersion}"
		play "org.webjars:webjars-play_${scalaAbiVersion}:2.3.0"
		play 'org.webjars:bootstrap:3.2.0'
  		play 'org.webjars:dojo:1.10.0'
  		play "com.typesafe.akka:akka-remote_${scalaAbiVersion}:${akkaVersion}"
  		play 'org.pegdown:pegdown:1.5.0'
		play('org.apache.zookeeper:zookeeper:3.4.5') {
			exclude group: 'javax.jms', module: 'jms'
			exclude group: 'com.sun.jdmk', module: 'jmxtools'
			exclude group: 'com.sun.jmx', module: 'jmxri'
			exclude group: 'org.jboss.netty', module: 'netty'
		}
  		play 'org.webjars:ace:01.08.2014'
	}
}

project(':publisher-provider:publisher-provider-app') {
	dependencies {
		testCompile project(':publisher-test')
		testCompile "junit:junit:${junitVersion}"		
		
		compile project(':publisher-commons')
		compile project(':publisher-provider:publisher-provider-protocol')
		compile "commons-io:commons-io:${commonsIOVersion}"
		compile 'com.fasterxml:aalto-xml:0.9.9'
		compile 'com.oracle:ojdbc7:12.1.0.1.0'
		compile("org.deegree:deegree-sqldialect-oracle:${deegreeVersion}") {
			exclude group: 'org.deegree', module: 'deegree-sqldialect-commons'
			exclude group: 'org.deegree', module: 'deegree-core-db'
		}
		compile("org.deegree:deegree-core-geometry:${deegreeVersion}") {
			// dependencies of deegree-core-commons
			exclude group: 'org.deegree', module: 'deegree-core-workspace'
			exclude group: 'org.codehaus.woodstox', module: 'woodstox-core-lgpl'
			exclude group: 'org.apache.ws.commons.axiom', module: 'axiom-impl'
			exclude group: 'org.apache.ws.commons.axiom', module: 'axiom-api'
			exclude group: 'com.sun.xml.fastinfoset', module: 'FastInfoset'
			exclude group: 'jaxen', module: 'jaxen'
			exclude group: 'xerces', module: 'xercesImpl'
			exclude group: 'commons-dbcp', module: 'commons-dbcp'
			exclude group: 'org.apache.httpcomponents', module: 'httpclient'
			exclude group: 'commons-pool', module: 'commons-pool'
			exclude group: 'jogl', module: 'jogl'
			exclude group: 'commons-cli', module: 'commons-cli'
			exclude group: 'org.reflections', module: 'org.reflections'
			exclude group: 'com.google.code.gson', module: 'gson'
			exclude group: 'org.deegree', module: 'deegree-ogcschemas'
			exclude group: 'xalan', module: 'xalan'
			exclude group: 'xalan', module: 'serializer'
			
			// dependencies of deegree-core-cs
			exclude group: 'org.deegree', module: 'deegree-core-annotations'
			exclude group: 'jai', module: 'jai-core'
			exclude group: 'jgridshift', module: 'jgridshift'
			exclude group: 'junit', module: 'junit'
			exclude group: 'org.postgis', module: 'postgis-jdbc'
			exclude group: 'postgresql', module: 'postgresql'
		}
		compile "ch.qos.logback:logback-classic:${logbackVersion}"
		compile "com.typesafe.akka:akka-slf4j_${scalaAbiVersion}:${akkaVersion}"
		
		runtime 'org.aspectj:aspectjweaver:1.8.0'
	}
}

project(':publisher-provider:publisher-provider-protocol') {
	dependencies {
		compile project(':publisher-commons')
		compile project(':publisher-domain')
	}
}

project(':publisher-database') {
	configurations {
		sql
		apt
		testCompile.extendsFrom(sql)
	}

	dependencies {
		sql "com.h2database:h2:${h2Version}"
	
		testCompile project(':publisher-test')		
		testCompile "com.typesafe.akka:akka-slf4j_${scalaAbiVersion}:${akkaVersion}"
	
		compile project(':publisher-commons')
		compile project(':publisher-provider:publisher-provider-protocol')
		compile "com.mysema.querydsl:querydsl-sql:${querydslVersion}"
		compile "com.typesafe.akka:akka-slf4j_${scalaAbiVersion}:${akkaVersion}"
		
		apt "com.mysema.querydsl:querydsl-apt:${querydslVersion}"
	}
	
	task generateDatabaseScript(type: ConcatSQLTask) {
		inputDir = '/src/main/resources/nl/idgis/publisher/database'
		buildDir = 'database-script'
		destFileName = 'publisher.sql'
		databaseType = 'H2'
	}
	
	def databaseDirectory = new File(project.buildDir, '/database')
	def databaseDriver = 'org.h2.Driver'
	def databaseUrl = "jdbc:h2:${databaseDirectory}/publisher;DATABASE_TO_UPPER=false;MODE=PostgreSQL"
	def databaseUser = 'sa'
	def databasePassword = ''
	
	task prepareDatabase(dependsOn: generateDatabaseScript) << {
		if(databaseDirectory.exists()) {
			databaseDirectory.deleteDir()
		}
	
		ant.sql(
			classpath: configurations.sql.asPath,
			driver: databaseDriver,
			url: databaseUrl,
			userid: databaseUser,
			password: databasePassword,
			src: "${project.buildDir}/database-script/publisher.sql")
	}
	
	task generateMetamodel(type: MetaDataExporterTask, dependsOn: prepareDatabase) {
		configuration = configurations.sql
		driverClassName = databaseDriver
		url = databaseUrl
		password = databasePassword
		user = databaseUser
		targetDir = new File(project.buildDir, 'metamodel')
		packageName = 'nl.idgis.publisher.database'
	}
	
	compileJava {
		ext.aptDir = new File(project.buildDir, 'apt')
	
		options.compilerArgs << '-processor' << 'com.mysema.query.apt.QuerydslAnnotationProcessor' 
		options.compilerArgs << '-processorpath' << configurations.apt.asPath 
		options.compilerArgs << '-s' << ext.aptDir
	}
	
	compileJava.doFirst {
		ext.aptDir.mkdirs()
	}
	
	compileJava.dependsOn(generateMetamodel)
	
	task generateDatabaseProperties << {
		ant.propertyfile(file: new File(databaseDirectory, 'publisher.properties')) {
			entry(key: 'database.driver', value: "${databaseDriver}")
			entry(key: 'database.url', value: "${databaseUrl}")
			entry(key: 'database.user', value: "${databaseUser}")
			entry(key: 'database.password', value: "${databasePassword}")
		}
	}
	
	processTestResources.dependsOn(generateDatabaseProperties)
	
	sourceSets {
		main {
			java {
				srcDir new File(project.buildDir, 'metamodel')
			}
		}
	}
}

gradle.addListener(new TimingListener())